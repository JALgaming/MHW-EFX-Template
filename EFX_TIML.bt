//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
string ReadDataInt(int32 r) {
    string s;
    SPrintf(s, "%08X | %d ", r,r);
    return s;
}

typedef struct {
    int32   datai<name="Keyframed Value (As Int)",read = ReadDataInt>;
    FSeek(FTell()-4);
    float   dataf<name="Keyframed Value (As Float)">; 
    float   bounceForwardLimit <name="Forward Limit">;
    float   bounceBacwardsLimit <name="Backwards Limit">;
    float   key_frame_number<name="Keyframe Frame Number">;
    short   easingMethod<comment = "0 - Binary (Stuck), 1 - Constant, (2 - Linear, 3 - Cuadratic) Known to Work, 4 - Cubic">;
    short   interpolationType1<comment = "2 - Only Functional">;
} TIML_Foot;

typedef struct {
    uint64  offSet<bgcolor=0x080080>;
    uint64  unkn0;
    uint32  unkn1;
    uint32  unkn2;
    float   animationLength;
    float   loopStartPoint;
    uint32  loopControl<comment="Determines how and if it will loop">;
    long    unknHash<format=hex>;
} TIML_Set0;

typedef struct {
    uint64  offSet<bgcolor=0x080080>;
    uint64  Count<bgcolor=0x0000FF>;
    uint32  nTimelineParamHash<format=hex, comment="Hash to determine if it affects a mesh or a materials, etc.">;
} TIML_Set1;

typedef struct {
    
    uint64  offSet<bgcolor=0x080080>;
    uint64  Count<bgcolor=0x0000FF>;
    uint32  datatypeHash<format=hex, comment="Hash to determine the transform type (rot:X, pos:Z, Etc).">;
    uint32  unkn1;
    local int p = FTell();
    FSeek(base+offSet);
    TIML_Foot    foot[Count]<bgcolor=0xFF0066,read=ReadFoot,name="Foot Data",optimize=false>;
    FSeek(p);
} TIML_Set2;

typedef struct {
    TIML_Set0    set0<bgcolor=0xAAAAAA,read=ReadSet0,name="Data Set 0">;
    FSeek(base+set0.offSet);
    TIML_Set1    set1<bgcolor=0x006600,read=ReadSet1,name="Data Set 1">;
    FSeek(base+set1.offSet);
    TIML_Set2    set2[set1.Count]<bgcolor=0x006600,read=ReadSet2,name="Data Set 2",optimize=false>;
} TIML_Data;

typedef struct {
    uint64  offSet<name="Data OffSet">;
    local int p = FTell();
    if(offSet != 0) {
        FSeek(offSet+base);
        TIML_Data    data<bgcolor=0x080080,name="Data">;
        FSeek(p);
    }
} TIML_Time;

typedef struct {
    local int base = FTell();

    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    CONST[5];
    int     count<name="Count">;
    if(count>0)
        int NULL;
    TIML_Time time[count]<bgcolor=0xff0000,name="Time",optimize=false>;
    FSeek(base+timl_length);
} Timl;