//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    string str;
} STRING;

// type 0 - float; 1 - int; 2 - ubyte; 3 - jitterless float
typedef struct (int type){
    if (type==0){
        float fixed_x;
        float random_x;
        //FSkip(skip*4);
        float fixed_y;
        float random_y;
        //FSkip(skip*4);
        float fixed_z;
        float random_z;
        //FSkip(skip*4);
    }else if (type == 3){
        float x;
        float y;
        float z;
    } else if (type == 2){
        ubyte x;
        ubyte y;
        ubyte z;
        ubyte NULL<bgcolor=0xffffff>;
    } else if (type == 1){
        int x;
        int y;
        int z;
    }
} XYZ;

typedef struct{
    long    EPVColorSlotHead;
    XYZ     color1(2)<name="Color 1",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    long    NULL2;
    XYZ     color2(2)<name="Color 2",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    int     spacer4;
    int     unkn15;
    float   size<bgcolor=0x91A480>;
    int     unkn17;
    byte    unkn18[2];
    short   spacer5<bgcolor=0x91A480>;
}EPVColorSlot;

typedef struct{
    float col0[4];
    float col1[4];
    float col2[4];
    float col3[4];
} matrix;

typedef struct{
    ubyte red;
    ubyte green;
    ubyte blue;
    ubyte alpha;
} colour;//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
string ReadDataInt(int32 r) {
    string s;
    SPrintf(s, "%08X | %d ", r,r);
    return s;
}

typedef struct{
    float dataF;
    FSkip(-4);
    int32 dataI;
    float bounceForwardLimit;
    float bounceBackwardsLimit;
    float frameTiming;
    short easingMethod<comment = "0 - Binary (Stuck), 1 - Constant, (2 - Linear, 3 - Cuadratic) Known to Work, 4 - Cubic">;
    short interpolationType1<comment = "2 - Only Functional">;
}TIML_Keyframe;

typedef struct(int base){
    int64 offset;
    int64 count;
    int32 datatypeHash<format=hex, comment="Hash to determine the transform type (rot:X, pos:Z, Etc).">;
    int32 unkn1;
    local int pos = FTell();
    FSeek(base+offset);
    TIML_Keyframe keyframes[count]<optimize = false>;
    FSeek(pos);
}TIML_Transform;

typedef struct(int base){
    int64 offset;
    int64 count;
    int32 timelineParameterHash<format=hex, comment="Hash to determine if it affects a mesh or a materials, etc.">;
    int32 NULL;
    local int pos = FTell();
    FSeek(base+offset);
    TIML_Transform transforms(base)[count]<optimize = false>;
    FSeek(pos);
}TIML_Type;

typedef struct(int base){
    int64 offset;
    int64 count;
    int32 unkn1;
    int32 unkn2;
    float animationLength;
    float loopStartPoint;
    int loopControl<comment="Determines how and if it will loop">;
    int labelHash<format=hex, comment="Label Hash">;
    local int pos = FTell();
    FSeek(base+offset);
    TIML_Type types(base)[count]<optimize = false>;
    FSeek(pos);
}TIML_Data;

typedef struct(int base){
    int64 offset;
    if (offset > 0){
        local int pos = FTell();
        FSeek(base+offset);
        TIML_Data data(base)<optimize = false>;
        FSeek(pos);
    }
}TIML_Body;

typedef struct{
    local int base;
    base = FTell();
    char timl[4];
    int signature[3]<comment = "402786304,402786304,0">;
    int enabled<comment = "20">;
    int NULL<comment = "0">;
    int32 count;
    if (count > 0) int32 NULL2;
    TIML_Body animations(base)[count]<optimize = false>;    
}TIML_Header;

typedef struct {
    local int base;
    base = FTell();
    TIML_Header Header;
    FSeek(base+timl_length);
}Timl;
//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     translate(0)<name="Translation T",bgcolor=0xFFAA00,read=ReadfloatXYZ>;
    XYZ     rotate(0)<name="Rotation R",bgcolor=0xAA00FF,read=ReadfloatXYZ>;  // Format Exceptions too many to diaplay
    XYZ     resize(0)<name="Resize S",bgcolor=0x00FFAA,read=ReadfloatXYZ>;    // Format Exceptions too many to diaplay
    int     unkn1;  // {0: 236, 1: 49, 2: 233, 3: 295, 4: 28783, 5: 36}
    //XYZ     unkn2(0)[6]<optimize=true,read=ReadfloatXYZ>;
    XYZ     Translation_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Translation_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]
    XYZ     Rotation_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Rotation_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]
    XYZ     Scale_Velocity(0)<optimize=true,read=ReadfloatXYZ>;
    XYZ     Scale_Velocity_Modifier(0)<optimize=true,read=ReadfloatXYZ>;//Multiplier/Acceleration? [0,1]

    int     enableVelocityBitflag;  // {0: 26795, 1: 2438, 2: 340, 3: 59} Bitflag: Pos0: Enable Velocity, Pos1: Enable Acceleration?
} Transform3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     translation_tracking(1)<name="Translation Tracking Mode",read=ReadintXYZ,bgcolor=0xAA0000,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform ">; 
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform 
    XYZ     angle_tracking(1)<name="Angle Tracking Mode",read=ReadintXYZ,bgcolor=0x00AA00,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform ">;
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform 
    XYZ     scale_tracking(1)<name="Scale Tracking Mode",read=ReadintXYZ,bgcolor=0x00AA00,comment="0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform ">;
    // 0 - Track Map Center Absolutely, 1 - Track Player Movement, 2 - Do not track further movements, 3 - Ignore Basic Transform
    int     spawnTrack<name="Track Across Spawns",bgcolor=0x0000AA0>;
    int     unkn1; // {0: 20433, 1: 9199}
    int     spawnLock<name="Lock To Position (Frames)",bgcolor=0x0000AA0>;
    int     bleedPos<name="Progressively Lock Elements to Position (Frames)">;
    int     bone_lim<name="Bone Limitation">;
} ParentOptions;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     instancesSpawnedTotal;
    int     instancesSpawnedPerFrame;
    int     randomizedSpawnsPerFrame;
    int     frameDelayBetweenSpawns;
    int     randomizedDelay;
    int     durationOfSpawnerLifespan;
    int     randomizedLifespan;
    int     unkn00[2];
    int     occur<name="Spawn Start Delay">;
    int     occur2<name="Randomized Spawn Start Delay">;
    uint32  unkn10;
    uint32  unkn11;
    uint32  repeatAtribute;//0 Repeat indefinitely, above is the number of repetitions; 
                            //I don't know what exactly it is doing but for Spawn uint32 unkn20 will allow other attributes to repeat once or continuously 
                            //with another one that is finite with int durationOfSpawnerLifespan 
                            //if the unkn20 is 0 if it is 1 or higher it will do that many cycles before it stops
    uint32  unkn21;
    uint32  unkn30;
    uint32  unkn31;
} Spawn;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    long    fadeInDuration;
    long    fadeInDurationJitter;
    long    duration;
    long    durationJitter;
    long    unkn2[2];
    long    fadeOutDuration;
    long    fadeOutDurationJitter;
    long    unkn3[2];
    long    indefiniteLifespan;
} Life;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     transform(0);
    int     patternControl<comment="0 - Cube, 1 - Sphere, 2 - Ring, 3 - Spot">;
    int     unkn2;
    float   unkn3_f0[4];
    int     unkn3_i0;
    float   spawnAngleLimits;
    float   unkn3_f1;
    int     unkn3_i1;
    int     spawnCount;
    float   unkn3_f2[3];

    int     unkn4;
} EmitterShape3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[3];
    float   unkn1[2];
    long    NULL0[4];

    float expansion_radius_limit;
    float expansion_radius_jitter;
    float expansion_radius_elasticity;// 0 - completely dampened (Instantly at Position), 1 - No dampening, continues moving.
    float expansion_radius_elasticity_jitter;

    float unkn2_04;//Nothing Known
    float unkn2_05;//Nothing Known
    float unkn2_06;//Nothing Known

    float unkn2_07;//TODO - Test this since they look stable
    float unkn2_08;//TODO - Test this since they look stable
    float unkn2_09;//TODO - Test this since they look stable

    int unkn2_10; //Set to 1 Normally

    float gravity;
    float gravity_jitter;

    long    NULL1[2];
    int     gravityDelay;
    int     gravityDelayJitter;
    long    NULL2;
} Velocity3D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   viewAngleLimit;//360 visible from every angle
    float   clipMin;
    float   fadeStart;
    float   clipMax;
} FadeByDepth;

// I was like WTF, any way I labeled the float...
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00;
    int     unkn01;
    long    spacer0;
    int     unkn03;
    float   unkn04<bgcolor=0x91A480>;
    int     unkn05[2];
    long    spacer1;
    int     unkn07[2];
    
    float   maxLengthLimit;
    float   contractionSpeed;//0 Lingers, 1 retracts, infinity retracts instantly
    float   colourTransitionPoint;// 0 is instantly start transition, 1 is start at the end
    float   emissiveStrength;
    float   unkn08;

    long    spacer2;
    int     unkn10;
    float   uvRepetition<bgcolor=0x91A480>;
    int     unkn12[3];
    long    spacer3;

    EPVColorSlot head;
    EPVColorSlot tailEnd;

    float   unkn23<bgcolor=0x91A480>;
    long    NULL5;
    float   unkn24<bgcolor=0x91A480>;
    long    NULL6;
    float   unkn25<bgcolor=0x91A480>;
    long    NULL7;
    float   unkn26;
    long    NULL8;
    short   NULL9;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} RibbonBlade;

typedef struct{
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     applicationRule;//Enum that determine how long and how many times it applies
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0x00aaaa>;
    int     unkn2[3];
    int     EPVColorSlot1;
    int     SlotOverride1;
    int     EPVColorSlot2;
    int     SlotOverride2;
    float   scale<name="Scale",bgcolor=0xaa55aa>;
    float   scaleJitter;
    float   width<name="Width",bgcolor=0xaaaa55>;
    float   widthJitter;
    float   height<name="Height",bgcolor=0xaaaa55>;
    float   heightJitter;

    float   flowmapSpeed;
    float   flowmapSpeedJitter;
    float   flowmapAcceleration;
    float   flowmapAccelerationJitter;
    float   flowmapStrength;
    float   flowmapStrengthJitter;
    float   flowmapStrengthAcceleration;
    float   flowmapStrengthAccelerationJitter;

    int     path_len<name="Path Length",bgcolor=0x123456>;
}dds_data;

typedef struct{
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     applicationRule;//Enum that determine how long and how many times it applies
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0x00aaaa>;
    int     unkn2[3];
    int     EPVColorSlot1;
    int     SlotOverride1;
    float   unknDimension;
    float   unknDimensionJitter;
    float   scale<name="Scale",bgcolor=0xaa55aa>;
    float   scaleJitter;
    float   width<name="Width",bgcolor=0xaaaa55>;
    float   widthJitter;
    float   height<name="Height",bgcolor=0xaaaa55>;
    float   heightJitter;

    float   flowmapSpeed;
    float   flowmapSpeedJitter;
    float   flowmapAcceleration;
    float   flowmapAccelerationJitter;
    float   flowmapStrength;
    float   flowmapStrengthJitter;
    float   flowmapStrengthAcceleration;
    float   flowmapStrengthAccelerationJitter;

    int     path_len<name="Path Length",bgcolor=0x123456>;
}billboard_data;

typedef struct {
    billboard_data dds;
    int     unkn5;
    uint64  unkn6;
    float   unkn7;
    int     unkn8;
    int     unkn9;
    char    p[dds.path_len]<name="Path",bgcolor=0x123456>;
} Billboard3D;

typedef struct {
    dds_data    dds;
    int     unkn5[4];
    XYZ     rotation(0);
    uint64  unkn7;
    char    p[dds.path_len]<name="Path",bgcolor=0x123456>;
} Plane;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     color(2)[2]<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    //float   unkn1[10];
    float   brightnessSlot1;
    float   emissiveMultiplier;
    float   brightnessSlot2;
    float   brightnessSlotMultiplier1;
    float   brightnessSlotMultiplier2;
    float   opacity;
    float   unknownFloat;
    int     unknownInt[3];
    //
    int     unkn2[26];
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} RgbWater;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   animationSpeed<name="Speed",bgcolor=0x0000BB>;
    long    NULL;
    float   scaleSpeed;
    float   scaleSpeedJitter;
    float   unkn1[2];

    float   scaleAccel;
    float   scaleAccelJitter;

    float   unkn2[8];
    int     delay;
    int     delayJitter;


} ScaleAnim;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     uvs_index<name="UVS File Path Index",bgcolor=0xBB0000>;
    long    NULL;
    int     startingFrame;
    int     startingFrameJitter;
    float   animationSpeed;
    float   animationSpeedJitter;
    float   animationAcceleration;
    float   animationAccelerationJitter;
    int     loopingEnum<comment="0-NotAnimated, 2-RandomRestart,8-, 9-Continuous">;//looping related
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} UVSequence;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   unkn1;
    float   transparentness<name="Transparentness & Brigntness",bgcolor=0x00BB00>;
    long    NULL;
    int     unkn2;
} AlphaCorrection;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     unkn1;
    int     spacer;
    int   unkn2;
    float   zDepthModifierStart;
    float   zDepthModifierEnd<bgcolor=0xAA00AA>;//<name="Effect Type Control",bgcolor=0xAA00AA>;
    int     unkn3_0;
    int     unkn3_1;
    int     controlBitflag<comment="0 no alpha, 1 is alpha enabled, 2 is emissive behavior, 3 is inverted color + alpha, 6 is grey scale">;
    float   unkn4[16];
    byte    objectInteractionFlag0<comment="Player Weapons and Interactables">;
    byte    objectInteractionFlag1<comment="Map">;
    byte    objectInteractionFlag2<comment="Weapon SubParts and Skybox">;
    byte    objectInteractionFlag3<comment="Player Skin">;
    int     visibleOnPreview;//bitflag
    int     unkn5[2];
} ShaderSettings;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    XYZ     color1(2)<name="Color Channel 1 (Alpha)",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness1<name="Brightness 1 (Alpha)">; //colors will combine
    XYZ     color2(2)<name="Color Channel 2 (RGB)",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness2<name="Brightness 2">;
    float   unkn4;
    float   brightness3<name="Color Balance 1">; //seems to bring out color 1 without lowering overall brightness, might be more of a color balance
    float   brightness4<name="Color Balance 2">; //setting either to 0 will make all disappear
    int     unkn6[10]<name="Color 1 Params">; //the 10th param kills color when set to 1
    int     unkn7[10]<name="Color 2 Params">; //I have no idea what else it does
} RgbFire;

typedef struct {
    int     unkn0[2];
    long    CD1<hidden = true>;

    float     emissive_saturation;
    float     emissive_saturation_jitter;
    float     emissive_brightness;
    float     emissive_brightness_jitter;
    XYZ       rotation(0);
    float     unkn5_2;
    float     unkn5_3;
    XYZ       scale(0);
    float     global_scale;
    float   global_scale_jitter;
    int     model_viscon;
    int     model_viscon_randomizer;//picks between the 2 at random
    colour     color1;
    colour     color2;
    colour     color3;
    colour     color4;
    int     unkn7[3];
    int     tracking_flags;//0 - Guide Source, 
                         //1 - Away from Source,
                         //2 - Look Away From Camera
                         //3 - WTF Occupies entire map
                         //4 - Guide Camera
                         //5 - Dissapears
                         //6 - Don't Track Rotation At All
                         //7 - Dissapears
                         //8 - Perpendicular to Ground, Don't Track
    int     unkn40;
    int     affectedByLight;
    int     shadowCastBitflag;
    int     epv_color_slot1;
    int     unkn5;
    int     epv_color_slot2;
    int     unkn6_1;
    byte    colorize_material1[4];//byte controls
    byte    colorize_material2[4];//byte controls
    int     unkn6_2;
    
    short   NULL1;
}Mod3Properties;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    Mod3Properties properties;
    byte    BeginMod3;
    string  path1<name="Mod3 Path1",bgcolor=0x123456,read=ReadStr>;
    string  path2<name="Mod3 Path2",bgcolor=0x123456,read=ReadStr>;
} Mesh;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    NULL[2];
    XYZ     spin_velocity(0);
    float unkn1_0;
    float unkn1_1;
    float momentum_conservation;
    XYZ     spin_acceleration(0);    
    float unkn1_2;
    //int unkn1_3;
} RotateAnim;

typedef struct {
    long    unkn; // 56 3A 6D EE
    // long    const0<name="E2D9F0AB",format=hex>;
    long    const0<name="AFDB4043",format=hex>;

    // 0x00 - ?; 0x03 - NULL; 0x06 - int; 0x09 - ?; 0x0C - float; 0x0F - Color;
    // 0x80 - file; 0x36/0x37 - int*2; 0x14 - XYZ
    int     t<name="Parameter Type">;

    if(t==0x03)
        long    NULL;
    else if (t==0x05)
        short   unkn0;
    else if (t==0x06)
        int     decal_epv_color_slot;
    else if (t==0x0C)
        float   unkn0;
    else if (t==0x0F)
        XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    else if (t==0x14)
        XYZ     unkn1(3)<read=ReadfloatXYZ,bgcolor=0x00FFFF>;
    else if (t==0x15) {
        float   unkn0;//float unkn0;
        long    unkn1;//float unkn1;
        float   unkn2;//float uScale;
        long    unkn3;//float vScale;
    } else if (t==0x36 || t==0x37)
        int     unkn1[2];
    else if (t==0x40)
        int64   unkn0;
    else if (t==0x80){
        long    file_type;
        int     path_len<name="Path Length",bgcolor=0x123456>;
        char    p[path_len]<name="Path",bgcolor=0x123456>;
    } else {
        //Printf("UNKNOWN EFX Behaiv Type\n");
        //Printf("%d\n",FTell());
        long    unkn_type;
    }
} EFX_Behav;

typedef struct {
    int     unkn0;
    int     behav_type_len<name="Behavior Type Len",bgcolor=0xABCDEF>;
    int     para_count<name="Parameter Count",bgcolor=0xFEDCBA>;
    char    b_type[behav_type_len]<name="Behavior Type",bgcolor=0xABCDEF>;
    EFX_Behav efx_behav[para_count]<name="Behavior Parameter",optimize=false>;
} EFX_Behavior;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    EFX_Behavior    efx_behav<name="Behavior Parameter">;
} PtBehavior;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1;
    ubyte   body_p<name="Player Aura Part",bgcolor=0x550055,comment="/wiki/EFX-Effect-Editing#aura-parts">;
    ubyte   wp_p<name="Weapon Aura Part",bgcolor=0x550055,comment="/wiki/EFX-Effect-Editing#aura-parts">;
    short   NULL;
    int     epv_color_slot;
    XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00>;
    float   unkn4;
    float   area[2]<name="Area of Aura",bgcolor=0x555500>;
    float   bright<name="Brightness (Can be Negative)",bgcolor=0x005555>;
    int area_of_aura; //9 front half, 8-1 everything
    float radii_effect_unkn0;
    float radii_effect_unkn1;
    float radii_effect_unkn2;
    float   unkn5[5];
} PlEmissive;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;

    float initialPosition;
    float initialPositionJitter;
    float speed;
    float speedJitter;
    float accel;//Maybe
    float accelJitter;//Maybe
    float innerRadius;
    float innerRadiusJitter;
    float outerRadius;
    float outerRadiusJitter;

    float restitutionDelay;
    float restitutionDelayJitter;
    float restitutionEccentricity;
    float restitutionEccentricityJitter;
    float restitutionElasticity;
    float restitutionElasticityJitter;
    float unkn16;
    float unkn17;
    float unkn18;
    float unkn19;

    float unkn20;
    float unkn21;
    float unkn22;

    int     int_unkn1[2];
    float   float_unkn2[3];    

} Guide;

typedef struct {
    long    set<bgcolor=0x990000>;
    int     unkn0<bgcolor=0xcc0000>;
    long    t<bgcolor=0xcc0000>;
    int     type<bgcolor=0xff0000>;
    if(type==0x80){
        long    head<name="EB5D1F24">;
        long    NULL;
        int     path_len<name="Path Length",bgcolor=0x123456>;
        char    p[path_len]<name="Path",bgcolor=0x123456>;
    }else if (type==0x06){
        int64   NULL;
        int     unkn;
    }else if (type==0x03 || type==0x0A || type==0x0C)
        long    NULL[3];
    else if (type==0x15)
        float   unkn[6];
} Tex_Set;

typedef struct {
    long    material_name_hash;
    long    material_shader_id_hash;
    long    unkn03;
    int     set_count<name="Set Count",bgcolor=0x660000>;
    Tex_Set     set[set_count]<optimize = false>;
} Tex_Block;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int64   unkn00;
    int     block_count;
    Tex_Block   block[block_count]<optimize=false>;
} Material;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
    float   unkn1[3];
    XYZ     unkn_set_1(0);
    int64   NULL[3];
    float   unkn2[12];
    XYZ     unkn_set_2(0);
    float   unkn3[5];
} Turbulence;



// #UNKNOWN STRUCT
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn;
    float   unkn2[4];
} FadeByEmitterAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     section_length;
    long    spacer0<hidden=true>;
    XYZ     color(2)<name="Color 1",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    long    spacer1<hidden=true>;
    XYZ     color2(2)<name="Color 2",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    long    spacer2<hidden=true>;;
    float   brightness<name="Brightness",bgcolor=0x00FF00>;
    long    unkn4[2];
    float   scale;
    float   scale_jitter;
    float   width;
    float   width_jitter;
    float   length;
    float   length_jitter;
    long    uv_map_height;
    float   material_tesselation_density;//Material Repeating Density
    float   material_tesselation_jitter;
    float   uv_map_width;
    long horizontal_physics_subdivision_count<comment="Disney Magic at 5000">;//Number of Subdivisions+1 (Number of horizontal dividers, minimum 2)
    long vertical_physics_subdivision_count;//Maybe, untested for vertical repetitions
    float   unkn15;

    long restitution_direction<comment = "0-Left,1-Up,2-Forward,3-Right,4-Down,5-Backwards,6-None">;//0-Left,1-Up,2-Forward,3-Right,4-Down,5-Backwards
    long    unkn16[4];
    long    startingAngle;
    long    startingAngleJitter;
    long    unkn16_0[2];
    short   unkn16_1;
    short   unkn16_2<comment = "0 - Align to World , Anything Else - Align to Source">;
    long    spacer3<hidden=true>;
    //
    float   unkn17;
    long    spacer4<hidden=true>;
    float lengthwise_offset_relative_to_camera;
    float unknown19_0;
    float restitution;
    float restitution_jitter;
    float inertial_excess;
    float inertial_excess_jitter;
    float springiness;
    float springiness_jitter;
    long spacer5<hidden=true>;
    long    unkn20[4];
    float   unkn21;
    long    unkn22[3];
    long    spacer6<hidden=true>;
    float   unkn23[8];
    long    unkn24;
    long    epvcolor[2];
    long    spacer7<hidden=true>;
    float base_width_multiplier;
    float base_opacity;
    float tip_width_multiplier;
    float tip_opacity;
    long    spacer8<hidden=true>;
    float   unkn27[2];
    short   visiblePreview;
    short    spacer9<hidden=true>;
    float base_flap_frequency;
    float base_flap_frequency_jitter;
    float base_flap_amount;
    float base_flap_amount_jitter;
    float tip_flap_frequency;
    float tip_flap_frequency_jitter;
    float tip_flap_amount;
    float tip_flap_amount_jitter;
    byte ib_junk[32]<hidden=true>;
    string  path1<name="UNKN 03 Path",bgcolor=0x123456,read=ReadStr>;
} Ribbon;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    NULL;
    int     section_length;
    long    spacer<hidden=true>;
    //XYZ     angular_movement(3)<read=ReadfloatXYZ,bgcolor=0x00FFFF>;
    float   main_axis_speed;
    float   secondary_axis_speed;
    float   teleport_radius;
    float   smooth_radius_randomized;
    float   main_axis_speed2;
    float   secondary_axis_speed2;
    float   teleport_radius2;
    float   smooth_radius_randomized2;
} Noise;

typedef struct{
    float u;
    float uJitter;
    float v;
    float vJitter;
}uv_transform;

typedef struct{
    int     unkn0;
    uv_transform initialPosition;
    uv_transform speed;
    uv_transform acceleration;//Multiplies speed every second
    uv_transform scale;
    uv_transform scaleSpeed;
    uv_transform scaleAcceleration;
}Material_Animation_Data;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    Material_Animation_Data uv1;
    Material_Animation_Data uv2;
    int     unkn2;
    float   extraMaterialInitialPosition;
    float   extraMaterialInitialPositionJitter;
    float   extraMaterialSpeed;
    float   extraMaterialSpeedJitter;
    float   opacity;
    float   opacityJitter;
    float   opacityAcceleration;//Multiplies opacity every second
    float   opacityAccelerationJitter;    
    
} UVControl;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[4];
    int64   NULL;
    int     unkn2[2];
} FadeByAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[8];
} EmitterBoundary;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    short   unkn0;
    short   unkn1;
    short   timing<comment= "0 Attaches at spawn, 4 attaches after the end">;//0
    short   unkn3;
    short   relationIndex;//Play Emitter/Play EFX Index that will declare the children
    short   unkn5;
    short   unkn6;
    short   unkn7;
    short   unkn8;
    short   unkn9;
} PtLife;//Declares this as parent to other main bodies


// #EFX TYPE STRUCT

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[9];
} ExternReference;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    byte    unkn1[4];
    float   unkn2;
    int     unkn3;
    long    unkn4;
    float   unkn5[9];
} FakePlane;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    byte    unkn1;
} Dummy;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[10];
} RandomFix;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int64   unkn0[2];
    float   unkn1[2];
} Transform2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1[2];
    float   unkn2[2];
    int     unkn3[4];
    float   unkn4[16];
    int     path_len<name="Path Length",bgcolor=0x123456>;
    int     unkn5[2];
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} Billboard2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[11];
} Blink;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    float   unkn1[3];
} LuminanceBleed;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    float   unkn1[4];
    int     unkn2[4];
} EmitterShape2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1[9];
    int     unkn2;
    float   unkn3[3];
    int     unkn4[3];
} Velocity2D;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00[2];
    long    spacer0;
    XYZ     color1(2);
    long    unkn02;
    XYZ     color2(2);
    long    unkn03;
    XYZ     emissive(2);
    long    unkn04;
    //float   unkn05[49];
//Break this one
    int     spacer05_00;
    int     unkn05_01;
    float   sineWaveFreq;
    float   sineWaveFreqJitter;
    float   alphaThreshold;
    float   unkn05_05;
    float   unkn05_06;
    float   unkn05_07;
    float   outwardsExpansionSpeed;
    float   outwardsExpansionSpeedJitter;

    float   unkn05_10;
    int     unkn05_11;
    int     unkn05_12;
    int     unkn05_13;
    int     spacer05_14;
    int     targetBoneID;
    int     unkn05_16;
    float   unkn05_17;
    int     EPVColorSlot1;
    int     EPVColorSlot2;

    int     unkn05_20;
    int     unkn05_21;
    int     unkn05_22;
    float   unkn05_23;
    float   unkn05_24;

    int     inflectionPointCount;
    float   uInflectionAngleLimit;
    float   uInflectionAngleLimitJitter;
    float   vInflectionAngleLimit;
    float   vInflectionAngleLimitJitter;

    int     inflectionPointCount2;
    float   uInflectionAngleLimit2;
    float   uInflectionAngleLimitJitter2;
    float   vInflectionAngleLimit2;
    float   vInflectionAngleLimitJitter2;

    float   glow;
    float   glowJitter;
    float   length;
    float   lengthJitter;

    float   width;
    float   widthJitter;

    float   startWidth;//startWidth
    float   uvRepetitionStart;//Fucking Cursed
    float   endWidth;
    float   uvRepetitionEnd;
    int     unkn05_45;
    int     unkn05_46;
    int     unkn05_47;
    int     unkn05_48;

    int     unkn06[2];

    float   radiusLimit;
    float   radiusLimitJitter;
    float   unkn07_02;
    float   unkn07_03;
    int   unkn07_04;
    float   unkn07_05;
    float   unkn07_06;
    float   unkn07_07;
    float   unkn07_08;
    float   unkn07_09;

    float   unkn07_10;
    float   branchLength;
    float   branchLengthJitter;
    float   unkn07_13;
    float   unkn07_14;
    float   unkn07_15;
    float   unkn07_16;
    float   unkn07_17;
    float   unkn07_18;
    float   unkn07_19;

    float   unkn07_20;
    float   unkn07_21;
    float   unkn07_22;
    float   unkn07_23;
    float   unkn07_24;
    float   unkn07_25;
    float   unkn07_26;
    float   unkn07_27;

    int     unkn08[2];
    float   unkn09[20];
    int     unkn10[4];
    float   unkn11[2];
    int     unkn12[2];
    float   unkn13[6];
    int     unkn14[3];
    float   unkn15[9];
    short   unkn16;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456,optimize = false>;
} Lightning;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     pixelNormalOffset;
    int     unkn2;
} Refraction;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
} MasterOnly;

typedef struct {
    long type<name="Type",format=hex,bgcolor=0x000000>;
    int unknown0;
    int fixed70;
    long spacer0;
    float distanceMod0;
    float distanceMod0Jitter;
    float prop1;
    float prop1Jitter;
    long spacer1;
    long spacer2;
    long spacer3;
    float prop2;
    XYZ  prop3(3);
    int direction;
    //0 left
    //1 down
    //2 forward
    //3 right
    //4 up
    //5 backward
    float distanceMod1;
    float distanceMod1Jitter;
    long spacer;
    int  unknown1;//(usually -1. saw one as 0)
    short unknown2;//(it was 256 so not sure if it is a flag or something else)
} RayCast;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    unkn0;
    long    unkn1;
    float   unkn2;
    long    unkn3;
    XYZ     color(2)<name="Color",read=ReadbyteXYZ,bgcolor=0xFFFF00,optimize=true>;
    float   brightness<name="Brightness",bgcolor=0xFF0000>;
    float   rimParam[3]<name="Emissive Rim Parameters",bgcolor=0x00FF00>;
    long    unkn4;
    float   blendParam[3]<name="Emissive Rim Blend Parameters",bgcolor=0x0000FF>;
    float   unkn8[5];
} ParentEmissive;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[3];
    float   unkn1[11];
    int     unkn2[2];
    long    unkn3[4];
    float   unkn4[4];
    int     unkn5[2];
    long    unkn6[4];
    float   unkn7;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} TubeLight;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    spacer;
    float   unkn1;
    float   bounce;
    float   bounceJitter;
    int     lifespan;//0 for no interaction, higher values result in more bounce
    int     lifespanJitter;
    float   bounceConditional;
} ScreenSpaceCollision;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    //int     unkn0[8];

    int     unkn00;
    int     physicsEnum;//0 Fall Through, 1 Bounce and Fade, 2 Bounce and Fall Through, 3 For Remaining after Bouncing (Set multiplier to 0), 
    int     unkn02;
    int     unkn03;
    int     unkn04;
    int     unkn05;//
    float   unkn06;
    int     unkn07;  

    //unkn01 physicsEnum //
    float   unkn1[3];
    int     unkn2[2];
    //float   unkn3[9];
    float   bounceElasticity;//Bounce Elasticity On Collision
    float   bounceElasticityJitter;//Bounce Elasticity Jitters
    float   bounceElasticityMultiplier;
    float   horizontalBounce;//Multiplier of bounce elasticity
    float   unkn34;
    float   unkn35;
    float   unkn36;
    float   unkn37;
    int     unkn38;

    int     unkn4[2];
    int     ieIndex;//0 Call PlayEFX Index?, FF FF FF FF Null
    int     unkn6[3];
} PtCollision;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    //long    unkn0[17];

    long    unkn00;
    long    unkn01;
    long    spacer;

    float   width;
    float   widthJitter;

    float   height;
    float   heightJitter;

    float   length;
    float   lengthJitter;

    long    unkn09;

    long    unkn10;
    float   unkn11;
    long    unkn12;
    long    unkn13;
    long    unkn14;

    long    pattern;
    long    unkn16;

    short   unkn17;
} Shovel;


typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     length;
    long    unkn1[length/4-5];
    float   unkn2[3];
    int     unkn3[2];
} FakeDoF;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     length;
    long    unkn1[length/4-5];
    float   unkn2[3];
    int     unkn3[2];
} RepeatArea;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[3];
} LinkPartsVisible;
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    spacer<hidden=true>;
    //int     unkn2[2];
    int body_part_id;//1F Everything, 1,2,3,4,5 as usual
    int weapon_id;//Same as PlEmissive
    colour color;
    int epvcolorslot;
    int   alpha_effect;//unknown
    //float   unkn4[4];
    float normal_map_strength;
    float alpha_threshold;//higher values cover less
    float unkn4_0;
    float unkn4_1;
    long    unkn5;
    //float   unkn6[8];
    float roughness_multiplier;
    float metallicness_multiplier;
    float subsurface_multipler;//Transparency
    //float unkn6[5];
    float unkn6_0;
    float craquelure_effect_diffumination;
    float craquelure_threshold;
    float unkn6_1; 
    float craquelure_smoothing_threshold;
    
} PlSnow;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2;
} PtTrigger;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2;
    int     unkn3;
    float   unkn4[6];
    int     unkn5[8];
    byte    unkn6;
} PathChain;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int unknown;//
    int unknown0;
    long spacer;
    float f0;
    float speed;
    float speedMultiplier;
    float f3;
    float f4;
    float radius;
    long i0;
    long i1;//
    int enableRadialVanish;// 1 Freak Speed, 3 disappear on inner radius
    int unknown1;
} Homing;

// Mod3 Useage
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1[3];
    byte    unkn2[8];
    int     unkn3;
    string  path1<name="Mod3 Path1",bgcolor=0x123456,read=ReadStr>;
} EmitterShapeMesh;

// NM Useage
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn00[2];
    long    spacer00;
    XYZ     color1(2);
    long    spacer01;
    XYZ     color2(2);
    long    spacer02;

    float   emissionStrength;
    float   unkn03_01;
    long    spacer03;

    float   unkn03_03;
    float   unkn03_04;
    float   unkn03_05;
    float   unkn03_06;
    XYZ     endPosition(3);

    float   unkn03_10;
    float   width;
    float   widthJitter;
    float   length;
    float   lengthJitter;
    float   startWidth;
    float   startOpacity;
    float   endWidth;
    float   endOpacity;

    int     subdivisionCount;
    int     unkn04_01;
    int     uvRepetition;//Set to 1 or 2

    float   widthwiseUVScalingAlpha;//Higher values shrink it
    int     spacer04;
    float   widthwiseUVScalingBML;//Higher values shrink it

    XYZ     color3(2);

    float   unkn06_00;//Probably Flow Map Related
    float   unkn06_01;//Probably Flow Map Related
    float   unkn06_02;//Probably Flow Map Related
    float   unkn06_03;//Probably Flow Map Related
    float   unkn06_04;//Probably Flow Map Related
    float   unkn06_05;//Probably Flow Map Related
    float   unkn06_06;//Probably Flow Map Related
    float   unkn06_07;//Probably Flow Map Related

    short   unkn06_08_00;
    short   unkn06_08_01;//Break Enum 0 Unbreakable, 1 Breakable

    float   lengthBreakpoint;
    float   lengthBreakpointJitter;

    float   breakpointLocation;
    float   breakpointLocationJitter;

    float   breakDelay;//Maybe
    float   breakDelayJitter;//Maybe

    float   tension;
    float   tensionJitter;

    float   unkn06_17;
    float   unkn06_18;

    float   gravityMultiplier;
    float   gravityMultiplierJitter;

    float   inertia;
    float   inertiaJitter;

    float   poseSnapping;
    float   poseSnappingJitter;

    int     endBoneID;//1 1-1, 3 Higher
    int     positionalAberration_01;
    int     positionalAberration_02;
    int     positionalAberration_03;
    int     positionalAberration_04;
    int     positionalAberration_05;

    XYZ     displacement(0);//Z doesn't seem to be working

    int     displacementToggle;//0 everything works, 1, 2 - kills the previous displacement, 3 - kills displacement
    float   unkn09_01;
    float   unkn09_02;
    float   unkn09_03;
    float   unkn09_04;
    float   unkn09_05;

    int     unkn10_00;
    float   unkn10_01;//Angle Related
    float   unkn10_02;//Angle Related Jitter

    int     unkn11;
    int     unkn12_00;
    float   unkn12_01;
    float   unkn12_02;
    float   unkn12_03;

    int     unkn13;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} StrainRibbon;

// 2 cases
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[1];
    int     unkn3;
    short   unkn4;
} SpawnByAngle;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2[7];
} CheckPureAttribute;

// 1 case CC_Effect cm_flash_000
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[3];
    int     path_len<name="Path Length",bgcolor=0x123456>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} TonemapFilter;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[4];
    float   unkn1[168];
} ColorCorrectFilter;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2;
    int     unkn3;
} SpawnByOcclusion;

// 1 case
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    float   unkn2[3];
} FadeByOcclusion;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2;
    XYZ     color(2);
    long    unkn3[2];
    float   unkn4[13];
} ParentSnow;

// 2 cases
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1;
    int     unkn2[2];
    XYZ     color(2);
    int     unkn3;
    long    unkn4;
    float   unkn5[4];
    long    unkn6;
    float   unkn7[8];
} OtomoSnow;

// 1 case
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    float   unkn1;
} ParentMaterial;

typedef struct{}EffectAttrColorTbl;
typedef struct{}MhEffectDecalBehavior;
typedef struct{}MhEffectDecalBehavior_getTotalFireLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSmokeLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSpecularLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalSheetLifeFrame;
typedef struct{}MhEffectDecalBehavior_getTotalGtoBLifeFrame;
typedef struct{}cCoordParameter;
typedef struct{}IEffectItem;
typedef struct{}Item;
typedef struct{}DynamicRay;
typedef struct{}FlowmapSettings;
typedef struct{}EffectExecutor;
typedef struct{}EffectEvent;
typedef struct{}EventBehaviorProperty;
typedef struct{}DecalBehavior;
typedef struct{}Variant;
typedef struct{}LightBehavior;
typedef struct{}PointLightBehavior;
typedef struct{}SpotLightBehavior;
typedef struct{}uEffectRadialBlurFilter;
typedef struct{}FilterBehavior;
typedef struct{}RadialBlurFilterBehavior;
typedef struct{}EffectData;
typedef struct{}EmitterExecutor;
typedef struct{}TypeMie3D;
typedef struct{}GroupItem;
typedef struct{}GpuPhysics;
typedef struct{}EmitterShape3DOverrider;
typedef struct{}MemoItem;
typedef struct{}IItemPropertyInfo;
typedef struct{}EffectDatabase_ItemPropertyInfo;
typedef struct{}EffectDatabase;
typedef struct{}TimelineResource;
typedef struct{}TimelineListResource;
typedef struct{}INode;
typedef struct{}Node;
typedef struct{}Group;
typedef struct{}Emitter;
typedef struct{}Action;
typedef struct{}Field;
typedef struct{}Node_getType;
typedef struct{}VelocityBase;
typedef struct{}TypeBillboardBase;
typedef struct{}EffectGroupData;
typedef struct{}EffectGroup;
typedef struct{}BoundaryBase;
typedef struct{}RenderTarget_Target;
typedef struct{}MaterialPath;
typedef struct{}TypeLightning_Branch;
typedef struct{}TypeRibbonBladeSection;
typedef struct{}TubeLightSection;
typedef struct{}EffectSettingPreset;
typedef struct{}EffectTimeRedeemPreset;
typedef struct{}Material_MaterialParam;
typedef struct{}Material_MaterialNodeData;
typedef struct{}ShapeMeshHolder;
typedef struct{}cEffectProviderCustomData_ActionElement;
typedef struct{}cEffectProviderCustomData_UnitElement;
typedef struct{}cEffectProviderCustomData;
typedef struct{}PlEmissiveManager;
typedef struct{}Guide_MoveType_AlwaysThrough;
typedef struct{}Guide_MoveType_SkipNear;
typedef struct{}Guide_MoveType_OldType;//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    int     unkn0;
    int     path_len<name="Path Length",bgcolor=0x123456>;
    long    type<name="Play EFX",format=hex,bgcolor=0xAA0000>;
    int     unkn[7];
    XYZ     xyz(3);
    int     NULL[3];
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} PlayEFX;

typedef struct {
    int     unkn[7];
    XYZ     xyz(3);
    int     NULL[3];
    int     target_count;
    int     targets[target_count];
} PlayEmitter;

typedef struct (int x) {
    local int ord = x;
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     count<name="I/E Count",bgcolor=0xFF0000>;
    local int i;
    for (i=0;i<count;i++){
        long typeHash<name="Play Emitter/Play EFX Hash",format=hex,bgcolor=0x990000>;
        if (typeHash == PLAYEFX) PlayEFX play<name="Play EFX">;
        else if (typeHash == PLAYEMITTER) PlayEmitter play<name="Play Emitter",format=hex,bgcolor=0x990000>;
        else Printf("Error Identifying Play Type Hash %X",typeHash);
    }
} PlayData;

typedef struct {
    local int k;
    for (k = 0; k<header.IE_Count; k++)
    PlayData Data(k)<name="Play Emitter/Play EFX Useage",read=ReadIEP>;
} Play;//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct {
    long    unkn[57];
} ExternTransform3D;

typedef struct {
    long    unkn[27];
} ExternVelocity3D;

typedef struct {
    long    unkn[19];
} ExternScaleAnim;

typedef struct {
    long    unkn[28];
} ExternRgbFire;

typedef struct {
    long    unkn[18];
} ExternSpawn;

typedef struct {
    long    unkn[44];
    byte    unkn1;
} ExternMesh;

typedef struct {
    long    unkn[33];
    byte    unkn1;
} ExternBillboard3D;

typedef struct {
    long    unkn[22];
} ExternEmitterShape3D;

typedef struct {
    long    unkn[11];
    byte    unkn1;
} ExternUVSequence;

typedef struct {
    long    unkn[19];
} ExternPlEmissive;

typedef struct {
    long    unkn[12];
} ExternVelocity3D0;

typedef struct {
    long    unkn[90];
    byte    unkn1;
} ExternVelocity3D1;

typedef struct {
    long    unkn[21];
} ExternVelocity3D2;

typedef struct {
    long    unkn[40];
    byte    unkn1;
} ExternRgbWater;

typedef struct {
    long    unkn[18];
} ExternVelocity3D5;

typedef struct {
    long    unkn[20];
} ExternVelocity3D6;

typedef struct {
    long    unkn[39];
    byte    unkn1;
} ExternVelocity3D7;


typedef struct{
    long t;
    if (t==EXTERNTRANSFORM3D) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternTransform3D  transform3D[attri_count];
    } else if (t==EXTERNVELOCITY3D) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D  velocity3D[attri_count];
    } else if (t==EXTERNSCALEANIM) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternScaleAnim  scaleAnim[attri_count];
    } else if (t==EXTERNRGBFIRE) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternRgbFire  rgbFire[attri_count];
    } else if (t==EXTERNSPAWN) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternSpawn  spawn[attri_count];
    } else if (t==EXTERNMESH) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternMesh  mesh[attri_count];
    } else if (t==EXTERNBILLBOARD3D) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternBillboard3D  billboard3d[attri_count];
    } else if (t==EXTERNEMITTERSHAPE3D) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternEmitterShape3D  emitterShape3D[attri_count];
    } else if (t==EXTERNUVSEQUENCE) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternUVSequence  uvSequence[attri_count];
    } else if (t==EXTERNPLEMISSIVE){
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternPlEmissive  p1Emissive[attri_count];
    } else if (t==EXTERNVELOCITY3D0) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D0 velocity3D0[attri_count];
    } else if (t==EXTERNVELOCITY3D1) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D1 velocity3D1[attri_count];
    } else if (t==EXTERNVELOCITY3D2) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D2 velocity3D2[attri_count];
    } else if (t==EXTERNPTBEHAVIOR) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        local int z;
        for(z=0;z<attri_count;z++)
            EFX_Behavior efx_behaiv;
    } else if (t==EXTERNRGBWATER) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternRgbWater rgbWater[attri_count];
    } else if (t==EXTERNVELOCITY3D5) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D5 velocity3D5[attri_count];
    } else if (t==EXTERNVELOCITY3D6) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D6 velocity3D6[attri_count];
    }  else if (t==EXTERNVELOCITY3D7) {
        int     unkn;
        int     attri_count<bgcolor=0xFFFF00>;
        ExternVelocity3D7 velocity3D7[attri_count];
    } 

} Extern_Data;


typedef struct{
    //local int ord = x;
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    long    NULL0;
    int     count<name="Extern Prefix Count",bgcolor=0xFF0000>;
    long    NULL1;
    Extern_Data    data[count];
} Extern_Attribute;

typedef struct {
    Extern_Attribute attribute[header.UNKN_Count]<name="Extern Reference",read=ReadExtern,optimize = false>;
} Extern;

typedef struct{}ExternFadeByAngle;
typedef struct{}ExternFadeByDepth;
typedef struct{}ExternStrainRibbon;
typedef struct{}ExternUVControl;
typedef struct{}ExternTurbulence;
typedef struct{}ExternItem;
typedef struct{}BasicExternItem;
typedef struct{}ExternGuide;
typedef struct{}ExternParentSnow;
typedef struct{}ExternOtomoSnow;//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x990000>;
    int     unkn0[2];
    float   unkn1[7];
    long    NULL;
} UnitBoundary;

typedef struct {
    int     path_len<name="Path Length",bgcolor=0x654321>;
    char    p[path_len]<name="Path",bgcolor=0x123456>;
} RenderTarget_Path;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x990000>;
    int     path_count<name="Path Count",bgcolor=0xFFFF00>;
    local int i;
//  Hard code 6
    for(i=0;i<6;i++)
        RenderTarget_Path paths<name="Paths">;
    long    NULL;
    int     unkn0[6];
    float   unkn1[9];
} RenderTarget;

// #SUPPORT STRUCT
typedef union {
    float   unknf;
    int     unkni;
} UN;

typedef struct {
    int     block_type<bgcolor=0x339933>;
    if (block_type > 0 && block_type < 6)
        UN  p[count*2]<read=ReadUN>;
    else if (block_type == 0 || block_type == 6)
        UN  p[count*3]<read=ReadUN>;
    else if (block_type == 7){
        int unkn0;
        UN  p[count*2 * unkn0]<read=ReadUN>;
    } else
        Printf("LayoutBank_B BLOCK TYPE ERROR %d\n", block_type);

} LayoutBank_B;

typedef struct {
    int     count<bgcolor=0xFF9900>;
    if(count>0) {
        while (ReadInt() != -1)
            LayoutBank_B spb;
        long    end<bgcolor=0xAAAAAA>;
    }
} LayoutBank_Block;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x990000>;
    int     unkn0;
    int     block_count<bgcolor=0x00FF00>;
    local int i;
    for(i=0;i<block_count;i++)
        LayoutBank_Block spb;
} LayoutBank;



typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0[2];
    long    unkn1[4];
    LayoutBank_Block spb;
} Layout;


typedef struct (int x) {
    local int ord = x;
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     CONST0; // 1
    int     count<name="Root Count",bgcolor=0xFF0000>;;
    int     CONST1; // 0
    
    local int j;
    for(j=0;j<count;j++)
        if(ReadInt() == 1413509420) // 2C 71 40 54
            UnitBoundary   sp1<name="Unit Boundary">;
        else if (ReadInt() == 2083659062) // 36 1D 32 7C
            RenderTarget   sp1<name="Render Target">;
        else if (ReadInt() == 2050487542) // F6 F4 37 7A
            LayoutBank   sp1<name="Layout Bank">;
} Root;//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// #HASH EFX

const int PLAYEFX              = 1965813039    ; // 25 31 AF 44 // 外部调用
const int PLAYEMITTER              = 1152332069    ; // 2F ED 2B 75 // 内部调用

// #Play Emitter / EXTERNAL HASHES
//const int CHILD_OF            = ; //5B 76 9F BF // CHILD OF
//Attributes is the index of the children, indexed in the main body. Those are excluded in the end declaration
//in general if you are a target of internal external you are excluded in the end declaration

// NEW DISCOVERERD
const int EXTERNREFERENCE               = 351869514     ; // 4A 1A F9 14
const int FAKEPLANE               = 1257264016    ; // 90 53 F0 4A
const int DUMMY               = 201720946     ; // 72 04 06 0C
const int RANDOMFIX               = 674258598     ; // A6 5E 30 28
const int TRANSFORM2D               = 428328940     ; // EC C7 87 19
const int BILLBOARD2D               = 1524169119    ; // 9F F9 D8 5A
const int BLINK               = 1354601878    ; // 96 95 BD 50
const int LUMINANCEBLEED               = 71967929      ; // B9 24 4A 04
const int EMITTERSHAPE2D               = 584030352     ; // 90 98 CF 22
const int VELOCITY2D               = 341394325     ; // 95 43 59 14
const int REFRACTION            = 957228464     ; // B0 25 0E 39
const int MASTERONLY               = 1616705008    ; // F0 F5 5C 60
const int TUBELIGHT               = 252064274     ; // 12 32 06 0F
const int SHOVEL               = 1240420851    ; // F3 51 EF 49
const int LAYOUT               = 156539255     ; // 77 99 54 09
const int FAKEDOF               = 212167510     ; // 56 6B A5 0C
const int REPEATAREA               = 842043995     ; // 5B 92 30 32
const int LINKPARTSVISIBLE               = 812022019     ; // 03 79 66 30
const int PTTRIGGER               = 2115227124    ; // F4 CD 13 7E
const int PATHCHAIN               = 1217635032    ; // D8 A2 93 48
const int HOMING  = 1535857470    ; // 3E 53 8B 5B
const int EMITTERSHAPEMESH               = 1111321825    ; // E1 6C 3D 42
const int SPAWNBYANGLE               = 1916268445    ; // 9D EF 37 72
const int CHECKPUREATTRIBUTE               = 283684959     ; // 5F B0 E8 10
const int TONEMAPFILTER               = 845585410     ; // 02 9C 66 32
const int COLORCORRECTFILTER               = 1293936879    ; // EF E8 1F 4D

// 31-45 See below


const int TIML                  = 1819109748    ; // 74 69 6D 6C // 关键帧动画
const int TRANSFORM3D       = 10286765      ; // AD F6 9C 00 // 基本变换
const int PARENTOPTIONS       = 368199626     ; // CA 47 F2 15 // 变换约束
const int SPAWN     = 1921765292    ; // AC CF 8B 72 // 发射器属性
const int LIFE            = 1320868484    ; // 84 DA BA 4E // 生命周期
const int EMITTERSHAPE3D        = 1003792849    ; // D1 A9 D4 3B // 对称复制
const int VELOCITY3D      = 222458580     ; // D4 72 42 0D // 动量控制
const int FADEBYDEPTH          = 859243212     ; // CC 02 37 33 // 可见距离
const int RIBBONBLADE        = 319363982     ; // 8E 1B 09 13 // DDS轨迹属性
const int BILLBOARD3D            = 1136904414    ; // DE C8 C3 43 // DDS(CM)调用   // CM_Useage
const int SCALEANIM             = 480396424     ; // 88 44 A2 1C // 播放循环
const int UVSEQUENCE            = 1698970185    ; // 49 3A 44 65 // UVS调用
const int ALPHACORRECTION   = 61219887      ; // 2F 24 A6 03 // 透明渐变控制
const int SHADERSETTINGS      = 1978267738    ; // 5A F8 E9 75 // 层级可见性
const int RGBFIRE    = 459578090     ; // EA 9A 64 1B // 颜色属性控制
const int MESH           = 276670093     ; // 8D A6 7D 10 // mod3调用
const int ROTATEANIM     = 1774142981    ; // 05 46 BF 69 // 自旋转控制 
const int PLEMISSIVE                 = 597394907     ; // DB 85 9B 23 // 光圈
const int GUIDE                = 1123011591    ; // 07 CC EF 42 // 跟随
const int LIGHTNING             = 1558046267    ; // 3B E6 DD 5C
const int PARENTEMISSIVE          = 14579343      ; // 8F 76 DE 00
const int PTCOLLISION         = 280719621     ; // 05 71 BB 10
const int PLSNOW          = 1267346617    ; // B9 2C 8A 4B
const int PTBEHAVIOR         = 1179069619    ; // B3 2C 47 46 // EFX行为
const int MATERIAL               = 1659025771    ; // 6B B9 E2 62 // 材质
const int PLANE        = 37870541      ; // CD DB 41 02 // ALTERNATIVE DDS USEAGE
const int RGBWATER               = 1660327299    ; // 83 95 F6 62 // RGBWATER
const int TURBULENCE                = 937428146     ; // B2 04 E0 37 // TURBULENCE
const int FADEBYEMITTERANGLE               = 2116359897    ; // D9 16 25 7E 
const int RIBBON         = 733291506     ; // F2 23 B5 2B 
const int NOISE= 523015778     ; // 62 96 2C 1F 
const int UVCONTROL     = 2020068998    ; // 86 CE 67 78 
const int FADEBYANGLE               = 1226136492    ; // AC 5B 15 49 
const int EMITTERBOUNDARY               = 873436648     ; // E8 95 0F 34
const int PTLIFE          = 493311524     ; // 24 56 67 1D
const int STRAINRIBBON      = 1062052310    ; // D6 A1 4D 3F
const int SCREENSPACECOLLISION             = 697457224     ; // 48 5A 92 29
const int RAYCAST        = 275476317     ; // 5D 6F 6B 10

// Unused So Far

const int EFFECTATTRCOLORTBL                                = 1690896576; // 64C908C0
const int MHEFFECTDECALBEHAVIOR                             = 1128324015; // 4340DBAF
const int MHEFFECTDECALBEHAVIOR_GETTOTALFIRELIFEFRAME       = 1250245974; // 4A853D56
const int MHEFFECTDECALBEHAVIOR_GETTOTALSMOKELIFEFRAME      = 409149100; // 18631EAC
const int MHEFFECTDECALBEHAVIOR_GETTOTALSPECULARLIFEFRAME   = 173467491; // 0A56E763
const int MHEFFECTDECALBEHAVIOR_GETTOTALSHEETLIFEFRAME      = 1969325070; // 7561840E
const int MHEFFECTDECALBEHAVIOR_GETTOTALGTOBLIFEFRAME       = 1296538020; // 4D4799A4
const int CCOORDPARAMETER                                   = 1892103853; // 70C736AD
const int IEFFECTITEM                                       = 19434345; // 01288B69
const int ITEM                                              = 1215086948; // 486CC164
const int DYNAMICRAY                                        = 1708014292; // 65CE3AD4
const int FLOWMAPSETTINGS                                   = 1184613359; // 469BC3EF
const int EFFECTEXECUTOR                                    = 1213896611; // 485A97A3
const int EXTERNFADEBYANGLE                                 = 1415485201; // 545E9711
const int EXTERNFADEBYDEPTH                                 = 779931249; // 2E7CCE71
const int EXTERNSTRAINRIBBON                                = 167781675; // 0A00252B
const int EXTERNUVCONTROL                                   = 1243935109; // 4A24F185
const int EXTERNTURBULENCE                                  = 777721399; // 2E5B1637
const int EXTERNITEM                                        = 1226458230; // 491A4476
const int BASICEXTERNITEM                                   = 1771113640; // 69910CA8
const int EFFECTEVENT                                       = 1923506186; // 72A6600A
const int EVENTBEHAVIORPROPERTY                             = 346395602; // 14A593D2
const int DECALBEHAVIOR                                     = 657374606; // 272EBD8E
const int VARIANT                                           = 588732697; // 23175919
const int LIGHTBEHAVIOR                                     = 603167555; // 23F39B43
const int POINTLIGHTBEHAVIOR                                = 110612213; // 0697CEF5
const int SPOTLIGHTBEHAVIOR                                 = 804054309; // 2FECE525
const int UEFFECTRADIALBLURFILTER                           = 1183727815; // 468E40C7
const int FILTERBEHAVIOR                                    = 618247822; // 24D9B68E
const int RADIALBLURFILTERBEHAVIOR                          = 1161774816; // 453F46E0
const int EFFECTDATA                                        = 1135895459; // 43B463A3
const int EMITTEREXECUTOR                                   = 2097355886; // 7D031C6E
const int TYPEMIE3D                                         = 1771758423; // 699AE357
const int GROUPITEM                                         = 2043222009; // 79C917F9
const int GPUPHYSICS                                        = 393634900; // 17766454
const int EMITTERSHAPE3DOVERRIDER                           = 1105989980; // 41EC115C
const int MEMOITEM                                          = 1484483739; // 587B6C9B
const int IITEMPROPERTYINFO                                 = 716000960; // 2AAD4EC0
const int EFFECTDATABASE_ITEMPROPERTYINFO                   = 997811050; // 3B79636A
const int EFFECTDATABASE                                    = 1987779161; // 767B1A59
const int TIMELINERESOURCE                                  = 610766284; // 24678DCC
const int TIMELINELISTRESOURCE                              = 1650401859; // 625F2243
const int INODE                                             = 881621517; // 348C7A0D
const int NODE                                              = 1376259135; // 52080C3F
const int ROOT                                              = 1099111713; // 41831D21
const int GROUP                                             = 256197774; // 0F45448E
const int EMITTER                                           = 668609413; // 27DA2B85
const int ACTION                                            = 1956806151; // 74A27E07
const int FIELD                                             = 963659027; // 39704513
const int EXTERN                                            = 242552826; // 0E750FFA
const int NODE_GETTYPE                                      = 1929273712; // 72FE6170
const int VELOCITYBASE                                      = 261120345; // 0F906159
const int TYPEBILLBOARDBASE                                 = 1590369728; // 5ECB1DC0
const int EFFECTGROUPDATA                                   = 1608814288; // 5FE48ED0
const int EFFECTGROUP                                       = 617098856; // 24C82E68
const int BOUNDARYBASE                                      = 1100150108; // 4192F55C
const int RENDERTARGET_TARGET                               = 1478767196; // 5824325C
const int TEXTUREPATH                                       = 386986771; // 1710F313
const int TYPELIGHTNING_BRANCH                              = 2120416030; // 7E62FB1E
const int TYPERIBBONBLADESECTION                            = 19293690; // 012665FA
const int TUBELIGHTSECTION                                  = 292704954; // 117252BA
const int EFFECTSETTINGPRESET                               = 712996915; // 2A7F7833
const int EFFECTTIMEREDEEMPRESET                            = 916096233; // 369A84E9
const int MATERIAL_MATERIALPARAM                            = 312479394; // 12A00EA2
const int MATERIAL_MATERIALNODEDATA                         = 1851897063; // 6E61B4E7
const int SHAPEMESHHOLDER                                   = 738773001; // 2C08C809
const int CEFFECTPROVIDERCUSTOMDATA_ACTIONELEMENT           = 510816299; // 1E72702B
const int CEFFECTPROVIDERCUSTOMDATA_UNITELEMENT             = 1178760989; // 4642771D
const int CEFFECTPROVIDERCUSTOMDATA                         = 1867843721; // 6F550889
const int PLEMISSIVEMANAGER                                 = 910471525; // 3644B165
const int EXTERNGUIDE                                       = 766474541; // 2DAF792D
const int EXTERNPARENTSNOW                                  = 74649634; // 04731022
const int EXTERNOTOMOSNOW                                   = 1181241355; // 4668500B
const int GUIDE_MOVETYPE_ALWAYSTHROUGH                      = 1168412664; // 45A48FF8
const int GUIDE_MOVETYPE_SKIPNEAR                           = 889775412; // 3508E534
const int GUIDE_MOVETYPE_OLDTYPE                            = 594406925; // 236DEE0D
const int SPAWNBYOCCLUSION                                  = 1913890808; // F8 A7 13 72
const int FADEBYOCCLUSION                                   = 64111316; // D4 42 D2 03
const int PARENTSNOW                                        = 215153612; // CC FB D2 0C
const int OTOMOSNOW                                         = 180261702; // 46 93 BE 0A
const int PARENTMATERIAL                                    = 638869640; // 88 60 14 26

const int EXTERNTRANSFORM3D             = 500644368     ; // 10 3A D7 1D
const int EXTERNMESH                    = 1850314036    ; // 34 8D 49 6E
const int EXTERNPLEMISSIVE              = 725249589     ; // 35 6E 3A 2B
const int EXTERNPTBEHAVIOR              = 1610366518    ; // 36 3E FC 5F
const int EXTERNRGBWATER                = 482524730     ; // 3A BE C2 1C
const int EXTERNVELOCITY3D              = 351887441     ; // 51 60 F9 14
const int EXTERNEMITTERSHAPE3D          = 1880343637    ; // 55 C4 13 70
const int EXTERNVELOCITY3D5             = 705591903     ; // 5F 7A 0E 2A
const int EXTERNSPAWN                   = 28559457      ; // 61 C8 B3 01
const int EXTERNRGBFIRE                 = 2069124466    ; // 72 55 54 7B
const int EXTERNVELOCITY3D1             = 839790967     ; // 77 31 0E 32
const int EXTERNVELOCITY3D6             = 1879331968    ; // 80 54 04 70
const int EXTERNBILLBOARD3D             = 693979274     ; // 8A 48 5D 29
const int EXTERNSCALEANIM               = 786529163     ; // 8B 7B E1 2E
const int EXTERNVELOCITY3D0             = 1338793878    ; // 96 5F CC 4F
const int EXTERNUVSEQUENCE              = 2097096908    ; // CC 28 FF 7C
const int EXTERNVELOCITY3D7             = 805496014     ; // CE E4 02 30
const int EXTERNVELOCITY3D2             = 283026906     ; // DA A5 DE 10// ------------------------------------------------
// --- 010 Editor v8.0.1
//
//      File: 
//   Authors: 叶子, 尾巴, canni, 冰块冰块冰Ice, MHW Modding Wiki, Crimson, Asterisk, Dave uRrr
//   Version: 3.1
//   Purpose
//  Category: 
// File Mask: *efx
//  ID Bytes: 
//   History: 
//              1.0     initial template
//                      structure tidy up
//                      more efx type hash marked
//                      research and generalisation from DMQW Group
//
//              1.1     add new type EFX_Behavior (FAKEPLANE)
//                      added notes about 20 bytes (type Post_Basic) before type Transform3D
//                      more parameter type found on EFX_Behavior
//
//              1.2     naming correction for Spawn (bone id that mapped to need to be marked)
//                      few counting parameter found for Keyframe_Anim, as least the structure is now filled up
//                      updated & added structure accroding to wiki
//                          structre of BILLBOARD3D
//                          added PLEMISSIVE structure
//                      
//              1.3     Removed the Post_Basic structure before the Transform3D
//                          as there is too many varies and hard to tell if there exists one
//                      Remove Dummy as it is one of the Post_Basic struct
//                      DDS_Useage ( = CM_Useage) -> marked brightness, scale, height/width, color
//                      Transform2D -> Flowmap, marked brightness, scale, height/width, color
//                      Billboard2D -> RgbWater, marked brightness, scale, height/width, color
//                      Added Turbulence
//                      Added EmitterBoundary and Unkn_12 struct, usually occur before Turbulence
//                      RandomFix -> Material, extended and structured, looks like mrl3
//                      
//              1.4     Added Guideing Effect
//                      SHADERSETTINGS -Moved before-> BILLBOARD3D
//                      
//                      
//                      ***Note***
//                      GOTO template variable may not work properly as the order of #EFX TYPE is not fully correct
//                      naming on #HASH EFX may not full correct
//                      overlapping on Keyframe_Anim -> Unknown Parameter 2 -> if the last Frame_Para's type is [93 2F D5 2B] 
//                      Unknow left over at end of efx file, with no header, seems like bunch of ints
//                      
//                      when controlling mod3 behavior, KEYFRAME_ANIM need to shift ONE block below (while there is mod3, 
//                      won't necessary having a keyframe)
//
//              2.0     Iceborne Fix
//                      Keyframe_Anim -Rename-> TIML
//                      Global_Control -Reestimate-> Prefix & Internal / External Efx useage (I/E Function Tested by Canni)
//                      Mod3 Path: No longer have a length indicator, instead, having fixed two entry
//                                  -> Mod3 Path 1 & Mod3 Path 2 -> identified by end of string [00]
//                      Material & relating attri path: Not fixed yet
//                      Header: unkn2[4] function mostly discovered
//                                  EFX_type (Count) = EFX_Count + IE_Count + UNKN_Count + NULL_Efx
//                                  Null Entry in EFX_type [00] = NULL_Efx
//                      ~           F_Lenth: Block Length relating to End of EFX (by Canni)
//                      ~ TIML:   Always have a prefix (5*4)
//                      Internal / External Efx useage (counted with IE_Count):
//                           External must have a prefix (5*4)
//                           Internal could have an External as a prefix or a prefix (2*4)
//
//              2.1     Restructured on External/Internal code when blocking
//
//              2.2     Introduced a section after External/Internal, temporary named as Unknown Prefix
//                      There is 17 types of discovered prefix header, two of them only have one instance
//                      THEY ARE NOT SORTED and only filled with LONG ARRAY
//                      
//              2.2.1   Marked EFX/EPV Color Slot for DDS/MOD3/PLEMISSIVE/EFX Behavior according to Crimson
//
//              3.0     Fixing a length for Unknown Prefix type 12 (DA A5 DE 10)
//                      Introduce the true header of EFX main part
//                      A unique type of main part, header = [9A A9 39 49]
//                          Discovered Three Types of Block, see detail in the template Single_Prefix
//                              One of the Main Body Attribute (Layout [77 99 54 09]) 
//                              having the same structure to Type 3 Block [F6 F4 37 7A]
//                      Merged TIML template by Dave uRrr, mapped TIML Foot value marked by 叶子
//                      Fixed Main Body Attribute:
//                          Material [6B B9 E2 62]
//                          ShaderSettings [5A F8 E9 75]
//                          Turbulence [B2 04 E0 37]
//
//                      Added path deceleration to few attribute
//                      Fix some type error when serializing
//                       
//                      Adding new attributes to complete the padding
//                      Discovered 45 new attribute and structure
//
//                      Discovered where the NULL efx entry count points to (second last structure of the efx)
//                      Marked the EFX Actual which is relating to the ints at the end of EFX file
//
//                      Restructure the EFX template, it reads the EFX sequentially instead to find key header
//                      Main attribute are repainted in occur order (See order at and of this template)
//                          * Note * The order is not exact as some of attribute not strictly guide the order and 
//                            forming a loop when sorting at all efxs
//                              [ShaderSettings,EmitterShape3D,Material,RotateAnim,Noise,Unkn_35,ScaleAnim,EmitterBoundary]
//                      Tested on all 8858 EFXs (with script ported python, in which the template also should do)
//
//              3.1     Added CRC string check for prefix headers (Thanks to Asterisk pointing out JAMCRC)
//
//                      *** Note ***                      
//                      One of the prefix clearly relating to the EFX Behavior attribute, by induction, the rest of 
//                      the header may share the similar function with other attribute
//                      Some Main attribute has only few occur times on all files
//
//              3.2     Added in Crimson, Silvris and Asterisk's Research regarding: Unknown_21 now EmissiveRim, Unknown_30 now AlbedoBlend
//                      and Unknown03 now TrailPhysics;
//                      filled in attributes for Spin_Control, Materials, EmissiveRim, AlbedoBlend, BasicTransform, LimitTransform,
//                      MomentumControl, ColorPropControl, Mod3Properties, PlEmissive, TrailPhysics, Unknown04.
//
//              3.3     Labelling properties, specifically in Flowmap, Dds_Usage, and UNKN_06 now renamed to Material_Animation
//
//              3.4     Renamed UNKN_12 to Parenting, renamed UNKN_17 to Lightning, Renamed UNKN_35 to StrainRibbon and labelled properties.
//
//              3.5     Renamed structures to guide the exe naming conventions found by SilvFris. Renamed externs to guide attribute conventions.
//
//              3.6     Split the template into multiple files to help with editing and automated conversion to other formats
// ------------------------------------------------


// #HEADER STRUCT
typedef struct {
    long    EFX<name="EFX">;
    long    VERSION<name="VERSION">;
    long    CONST0[5]<name="CONSTANT">;
    long    EFXR<name="EFXR">;
    int     unkn0;
    int     unkn1;
    int     EFX_Count<name="NON-NULL EFX Type Entry Count">;
    int     EFX_type_len<name="EFX Type Entry Length">;
    int     IE_Count<name="Play Emitter/Player EFX Count">;
    int     UNKN_Count<name="Extern Count">;
    int     NULL_Count<name="Subselect Count">;
    int     NULL_Length_Double<name="Subselect Table Length">;
    int     End_Count<name="EOF Count">;
    int     FileSize_Double;
} Header;

typedef struct {
    local int i;
    local int64 en = FTell()+header.EFX_type_len;
    local TFindResults s = FindAll((ubyte)0,true,false,0,0.0,1,FTell(),en);
    for(i=0;i<s.count && FTell()<en;i++){
        STRING efx_T<name=" ",read=ReadSTR>;
    };
} EFX_Type;

// LAYOUT see after single prefix


//typedef struct {
//    long    type<name="Type",format=hex,bgcolor=0x000000>;
//    int     unkn0[2];
//    long    unkn1;
//    float   unkn2[2];
//    int     unkn3[2];
//    int     unkn4[2];
//    int     unkn5[2];
//    int     unkn6[2];
//    int     unkn7[2];
//    int     unkn8[2];
//    int     unkn9[2];
//} Dummy;

string ReadTIML_Data(TIML_Data& r) {
    string s;
    SPrintf(s, "offSet: %d \t Count: %d \t [%d %d %f %f %d %x]", 
        r.offSet, r.unkn0, r.unkn1, r.unkn2, r.animationLength, r.loopStartPoint, r.loopControl, r.unknHash);
    return s;
}

typedef struct (int count){
    local int j;
    for(j=0;j<count && j <100;j++)
        //Printf("%d\n",j);
        if      (ReadInt() == EXTERNREFERENCE             )
            ExternReference             externreference             <bgcolor=0x1800ff>;
        else if (ReadInt() == FADEBYEMITTERANGLE             )
            FadeByEmitterAngle             fadebyemitterangle             <bgcolor=0xff2400>;
        else if (ReadInt() == FAKEPLANE             )
            FakePlane             fakeplane             <bgcolor=0xff2400>;
        else if (ReadInt() == RIBBON       )
            Ribbon       ribbon       <bgcolor=0xffe400>;
        else if (ReadInt() == NOISE             )
            Noise  noise             <bgcolor=0x00d8ff>;
        else if (ReadInt() == DUMMY             )
            Dummy             dummy             <bgcolor=0xff5a00>;
        else if (ReadInt() == UVCONTROL   )
            UVControl   uvcontrol <bgcolor=0xe4ff00>;
        else if (ReadInt() == FADEBYANGLE             )
            FadeByAngle             fadebyangle             <bgcolor=0xff003c>;
        else if (ReadInt() == RANDOMFIX             )
            RandomFix             randomfix             <bgcolor=0x4800ff>;
        else if (ReadInt() == TRANSFORM2D             )
            Transform2D             transform2d             <bgcolor=0x7800ff>;
        else if (ReadInt() == BILLBOARD2D             )
            Billboard2D             billboard2d             <bgcolor=0xff2400>;
        else if (ReadInt() == EMITTERBOUNDARY             )
            EmitterBoundary             emitterboundary             <bgcolor=0x00ff06>;
        else if (ReadInt() == PTLIFE        )
            PtLife  ptlife<bgcolor=0x00ff06>;
        else if (ReadInt() == BLINK             )
            Blink             blink             <bgcolor=0x00d8ff>;
        else if (ReadInt() == LUMINANCEBLEED             )
            LuminanceBleed             luminancebleed             <bgcolor=0x0078ff>;
        else if (ReadInt() == EMITTERSHAPE2D             )
            EmitterShape2D             emittershape2d             <bgcolor=0xff003c>;
        else if (ReadInt() == VELOCITY2D             )
            Velocity2D             velocity2d             <bgcolor=0xff0006>;
        else if (ReadInt() == LIGHTNING           )
            Lightning          lightning            <bgcolor=0xffba00>;
        else if (ReadInt() == REFRACTION          )
            Refraction         refraction           <bgcolor=0x24ff00>;
        else if (ReadInt() == MASTERONLY             )
            MasterOnly             masteronly             <bgcolor=0x0018ff>;
        else if (ReadInt() == RAYCAST      )
            RayCast      raycast    <bgcolor=0xd800ff>;
        else if (ReadInt() == PARENTEMISSIVE        )
            ParentEmissive        parentemissive        <bgcolor=0x00a8ff>;
        else if (ReadInt() == TUBELIGHT             )
            TubeLight             tubelight             <bgcolor=0x5aff00>;
        else if (ReadInt() == SCREENSPACECOLLISION           )
            ScreenSpaceCollision           screenspacecollision           <bgcolor=0x00fff6>;
        else if (ReadInt() == PTCOLLISION       )
            PtCollision    ptcollision    <bgcolor=0x00fff6>;
        else if (ReadInt() == SHOVEL             )
            Shovel             shovel             <bgcolor=0x00d8ff>;
        else if (ReadInt() == LAYOUT             )
            Layout             layout             <bgcolor=0x00a8ff>;
        else if (ReadInt() == FAKEDOF             )
            FakeDoF             fakedof             <bgcolor=0x0078ff>;
        else if (ReadInt() == REPEATAREA             )
            RepeatArea             repeatarea             <bgcolor=0xffba00>;
        else if (ReadInt() == LINKPARTSVISIBLE             )
            LinkPartsVisible             linkpartsvisible             <bgcolor=0xff00f6>;
        else if (ReadInt() == PLSNOW        )
            PlSnow        plsnow        <bgcolor=0xff8400>;
        else if (ReadInt() == PTTRIGGER             )
            PtTrigger             pttrigger             <bgcolor=0x00d8ff>;
        else if (ReadInt() == PATHCHAIN             )
            PathChain             pathchain             <bgcolor=0x00a8ff>;
        else if (ReadInt() == HOMING             )
            Homing homing <bgcolor=0x00a8ff>;
        else if (ReadInt() == EMITTERSHAPEMESH             )
            EmitterShapeMesh             emittershapemesh             <bgcolor=0xff5a00>;
        else if (ReadInt() == STRAINRIBBON       )
            StrainRibbon       strainribbon  <bgcolor=0x24ff00>;
        else if (ReadInt() == SPAWNBYANGLE             )
            SpawnByAngle             spawnbyangle             <bgcolor=0xff0096>;
        else if (ReadInt() == CHECKPUREATTRIBUTE             )
            CheckPureAttribute             checkpureattribute             <bgcolor=0x00ff66>;
        else if (ReadInt() == TONEMAPFILTER             )
            TonemapFilter             tonemapfilter             <bgcolor=0x1800ff>;
        else if (ReadInt() == COLORCORRECTFILTER             )
            ColorCorrectFilter             colorcorrectfilter             <bgcolor=0x0018ff>;
        else if (ReadInt() == SPAWNBYOCCLUSION             )
            SpawnByOcclusion             spawnbyocclusion             <bgcolor=0xff0096>;
        else if (ReadInt() == FADEBYOCCLUSION             )
            FadeByOcclusion             fadebyocclusion             <bgcolor=0xff2400>;
        else if (ReadInt() == PARENTSNOW             )
            ParentSnow             parentsnow             <bgcolor=0xff8400>;
        else if (ReadInt() == OTOMOSNOW             )
            OtomoSnow             otomosnow             <bgcolor=0x1800ff>;
        else if (ReadInt() == PARENTMATERIAL             )
            ParentMaterial             parentmaterial             <bgcolor=0x1800ff>;
        else if (ReadInt() == TRANSFORM3D     )
            Transform3D     transform3d     <bgcolor=0x7800ff>;
        else if (ReadInt() == PARENTOPTIONS     )
            ParentOptions     parentoptions     <bgcolor=0xa800ff>;
        else if (ReadInt() == SPAWN   )
            Spawn   spawn   <bgcolor=0xff00c6>;
        else if (ReadInt() == LIFE          )
            Life          life          <bgcolor=0xff0066>;
        else if (ReadInt() == EMITTERSHAPE3D      )
            EmitterShape3D      emittershape3d      <bgcolor=0xff8400>;
        else if (ReadInt() == VELOCITY3D    )
            Velocity3D    velocity3d    <bgcolor=0xff8400>;
        else if (ReadInt() == FADEBYDEPTH        )
            FadeByDepth        fadebydepth        <bgcolor=0xff0006>;
        else if (ReadInt() == RIBBONBLADE      )
            RibbonBlade      ribbonblade      <bgcolor=0xffba00>;
        else if (ReadInt() == BILLBOARD3D          )
            Billboard3D          billboard3d          <bgcolor=0xffe400>;
        else if (ReadInt() == SCALEANIM           )
            ScaleAnim           scaleanim           <bgcolor=0x84ff00>;
        else if (ReadInt() == UVSEQUENCE          )
            UVSequence          uvsequence          <bgcolor=0x84ff00>;
        else if (ReadInt() == ALPHACORRECTION )
            AlphaCorrection alphacorrection <bgcolor=0x5aff00>;
        else if (ReadInt() == SHADERSETTINGS    )
            ShaderSettings    shadersettings    <bgcolor=0xf4ce7e>;
        else if (ReadInt() == RGBFIRE  )
            RgbFire  rgbfire  <bgcolor=0x00ff66>;
        else if (ReadInt() == MESH         )
            Mesh         mesh         <bgcolor=0xbaff00>;
        else if (ReadInt() == ROTATEANIM   )
            RotateAnim   rotateanim   <bgcolor=0x84ff00>;
        else if (ReadInt() == PLEMISSIVE               )
            PlEmissive               plemissive               <bgcolor=0xffba00>;
        else if (ReadInt() == GUIDE              )
            Guide              guide              <bgcolor=0x0018ff>;
        else if (ReadInt() == PTBEHAVIOR       )
            PtBehavior       ptbehavior       <bgcolor=0x00ff3c>;
        else if (ReadInt() == MATERIAL             )
            Material             material             <bgcolor=0x00fff6>;
        else if (ReadInt() == PLANE      )
            Plane       plane     <bgcolor=0xffe400>;
        else if (ReadInt() == RGBWATER             )
            RgbWater             rgbwater             <bgcolor=0x00ff96>;
        else if (ReadInt() == TURBULENCE              )
            Turbulence              turbulence              <bgcolor=0x00ffc6>;
        else
            Printf("%d Not Found!\n", FTell());
} Main_Body;

typedef struct (int x) {
    local int ord = x;
    long    type<name="Type",format=hex,bgcolor=0x000000>;
    int     unkn0;
    int     attr_count<name="Atribute Count",bgcolor=0xffffff>;
    int     NULL;
    int     timl_length;
    if(timl_length>0)
        Timl    timl<name="Keyframe Animation",bgcolor=0x0099ff>;
    Main_Body mb(attr_count);
} Main_Data;

typedef struct {
    local int k;
    for(k=0;k<header.EFX_Count;k++)
        if(ReadInt() == 1228515738) // 9A A9 39 49
            Root sp(k)<name="Root",bgcolor=0x882E61,read=ReadSingleP>;
        else
            Main_Data mp(k)<read=ReadMainP>;
} Main;

typedef struct {
    long    type<name="Type",format=hex,bgcolor=0x0000ff>;
    long    unkn0[3];
    int     count<name="Subselection Table Entry Count",bgcolor=0x0000aa>;
    int     entry[count]<name="Subselection Entry">;
} Subselect_Table;

typedef struct {
    local int k;
    for(k=0;k<header.NULL_Count;k++)
        Subselect_Table  subselect_table<name="SUBSELECT TABLE">;
} Subselect;//Acts as a table of subselectable sections for the epv subselection calls

// #HEADER
Header          header<name="Header",bgcolor=0x00ffff>;
EFX_Type        efx_Type<name="EFX Type",bgcolor=0xf000ff>;
Play            play<name="Play Emitter/Play EFX Useage",bgcolor=0x7C9F35>;
Extern          extern<name="External Reference",bgcolor=0x277553>;
Main            main<name="Main Body",bgcolor=0x1b1b1b>;
Subselect       null<name="Subselection Tables",bgcolor=0xffffff>;
int             end[header.End_Count]<name="End EFX (Acutal?)",bgcolor=0x999887>;


// CRC string

// Full function

/*

string ReadIEP(IE_Prefix &ie) {
    string s;
    SPrintf(s, "IE Map to: [%d] %s \t\t CRC: %s", ie.ord, efx_Type.efx_T[ie.ord].str, EFXTypeCRC(ie.type));
    return s;
}

string ReadExtern(Extern_Attribute &up) {
    local int order = up.ord + header.IE_Count;
    string s;
    SPrintf(s, "UP Map to: [%d] %s \t\t CRC: %s", order, efx_Type.efx_T[order].str, EFXTypeCRC(up.type));
    return s;
}

string ReadSingleP(SINGLE_PREFIX &sp) {
    local int order = sp.ord + header.IE_Count + header.UNKN_Count;
    string s;
    SPrintf(s, "SP Map to: [%d] %s \t\t CRC: %s", order, efx_Type.efx_T[order].str, EFXTypeCRC(sp.type));
    return s;
}

string ReadMainP(MAIN_PREFIX &mp) {
    local int order = mp.ord + header.IE_Count + header.UNKN_Count;
    string s;
    SPrintf(s, "MP Map to: [%d] %s \t\t CRC: %s", order, efx_Type.efx_T[order].str, EFXTypeCRC(mp.type));
    return s;
}
*/

// #DISPLAY FUNCTION
string ReadintXYZ(XYZ& h) {
    string s;
    SPrintf(s, "X:%d \t Y:%d \t Z:%d", h.x, h.y, h.z);
    return s;
};

string ReadfloatXYZ(XYZ& h) {
    string s;
    SPrintf(s, "X:%f \t Y:%f \t Z:%f - rX:%f \trY:%f \trZ:%f", h.fixed_x, h.fixed_y, h.fixed_z,h.random_x, h.random_y, h.random_z);
    return s;
};

string ReadbyteXYZ(XYZ& h) {
    string s;
    SPrintf(s, "X:%d \t Y:%d \t Z:%d", h.x, h.y, h.z);
    return s;
};

string ReadStr(string c){
    string s;
    SPrintf(s, "%s", c);
    return s;
};

string ReadSTR(STRING& c){
    string s;
    SPrintf(s, "%s", c.str);
    return s;
};

string ReadUN(UN &u) {
    string s;
    SPrintf(s, "Int: %d\tFloat: %f", u.unkni, u.unknf);
    return s;
}

// Map Only

string ReadIEP(PlayData &ie) {
    string s;
    SPrintf(s, "IE Map to: [%d] %s", ie.ord, efx_Type.efx_T[ie.ord].str);
    return s;
}

string ReadExtern(Extern_Attribute &up) {
    string s;
    SPrintf(s, "Extern Map");
    return s;
}

string ReadSingleP(Root &sp) {
    local int order = sp.ord + header.IE_Count + header.UNKN_Count;
    string s;
    SPrintf(s, "Root Map to: [%d] %s", order, efx_Type.efx_T[order].str);
    return s;
}

string ReadMainP(Main_Data &mp) {
    local int order = mp.ord + header.IE_Count + header.UNKN_Count;
    string s;
    SPrintf(s, "MP Map to: [%d] %s", order, efx_Type.efx_T[order].str);
    return s;
}

// ORDER (sort of)
/*
[(__main__.ExternReference, 0),
 (__main__.TonemapFilter, 0),
 (__main__.OtomoSnow, 0),
 (__main__.ParentMaterial, 0),
 (__main__.RandomFix, 1),
 (__main__.Transform3D, 2),
 (__main__.Transform2D, 2),
 (__main__.ParentOptions, 3),
 (__main__.RayCast, 4),
 (__main__.LinkPartsVisible, 5),
 (__main__.Launcher_Prop, 6),
 (__main__.SpawnByAngle, 7),
 (__main__.SpawnByOcclusion, 7),
 (__main__.Life, 8),
 (__main__.EmitterShape2D, 9),
 (__main__.FadeByAngle, 9),
 (__main__.Velocity2D, 10),
 (__main__.FadeByDepth, 10),
 (__main__.Billboard2D, 11),
 (__main__.FadeByEmitterAngle, 11),
 (__main__.FakePlane, 11),
 (__main__.FadeByOcclusion, 11),
 (__main__.Dummy, 12),
 (__main__.EmitterShapeMesh, 12),
 (__main__.EmitterShape3D, 13),
 (__main__.Velocity3D, 13),
 (__main__.PlSnow, 13),
 (__main__.ParentSnow, 13),
 (__main__.PlEmissive, 14),
 (__main__.Lightning, 14),
 (__main__.RibbonBlade, 14),
 (__main__.RepeatArea, 14),
 (__main__.Billboard3D, 15),
 (__main__.Ribbon, 15),
 (__main__.Plane, 15),
 (__main__.Material_Animation, 16),
 (__main__.Mesh, 17),
 (__main__.UVSequence, 18),
 (__main__.ScaleAnim, 18),
 (__main__.RotateAnim, 18),
 (__main__.AlphaCorrection, 19),
 (__main__.TubeLight, 19),
 (__main__.Refraction, 20),
 (__main__.StrainRibbon, 20),
 (__main__.EmitterBoundary, 21),
 (__main__.Parenting, 21),
 (__main__.EFX_Behavior, 22),
 (__main__.RgbFire, 23),
 (__main__.CheckPureAttribute, 23),
 (__main__.RgbWater, 24),
 (__main__.Turbulence, 25),
 (__main__.Material, 26),
 (__main__.PtCollisioning, 26),
 (__main__.ScreenSpaceCollision, 26),
 (__main__.Noise, 27),
 (__main__.Blink, 27),
 (__main__.Shovel, 27),
 (__main__.PtTrigger, 27),
 (__main__.ParentEmissive, 28),
 (__main__.PathChain, 28),
 (__main__.Homing, 28),
 (__main__.Layout, 28),
 (__main__.FakeDoF, 29),
 (__main__.LuminanceBleed, 30),
 (__main__.MasterOnly, 31),
 (__main__.Guide, 31),
 (__main__.ColorCorrectFilter, 31),
 (__main__.ShaderSettings, 32)]
 */

// COLOR
/*
0 <bgcolor=0x1800ff>
1 <bgcolor=0x4800ff>
2 <bgcolor=0x7800ff>
3 <bgcolor=0xa800ff>
4 <bgcolor=0xd800ff>
5 <bgcolor=0xff00f6>
6 <bgcolor=0xff00c6>
7 <bgcolor=0xff0096>
8 <bgcolor=0xff0066>
9 <bgcolor=0xff003c>
10 <bgcolor=0xff0006>
11 <bgcolor=0xff2400>
12 <bgcolor=0xff5a00>
13 <bgcolor=0xff8400>
14 <bgcolor=0xffba00>
15 <bgcolor=0xffe400>
16 <bgcolor=0xe4ff00>
17 <bgcolor=0xbaff00>
18 <bgcolor=0x84ff00>
19 <bgcolor=0x5aff00>
20 <bgcolor=0x24ff00>
21 <bgcolor=0x00ff06>
22 <bgcolor=0x00ff3c>
23 <bgcolor=0x00ff66>
24 <bgcolor=0x00ff96>
25 <bgcolor=0x00ffc6>
26 <bgcolor=0x00fff6>
27 <bgcolor=0x00d8ff>
28 <bgcolor=0x00a8ff>
29 <bgcolor=0x0078ff>
30 <bgcolor=0x0048ff>
31 <bgcolor=0x0018ff>
*/


//Unused Dummies
